.tutorial{:data =>{:title=>'OAuth With Implicit Grant'}}
    .step{:data=>{:title=>'Introduction'}}
        :markdown
            This tutorial walks through how to use the OAuth implicit code grant.  For more information on the implicit grant, see [Use an Implicit Grant](http://developer.mypurecloud.com/api/rest/authorization/use-implicit-grant.html)
        .note.note-csharp
            In a C# desktop application, we host the login window in a web browser control and watch for the navigation event.  When this occurs, we pull the access_token from the URL.
        .note.note-ruby
            In Ruby, we start a Sinatra server and open a web browser that displays the authorization page to the end user.
        .note.note-python
            In Python, we start a server via listening on a socket and open a web browser that displays the authorization page to the end user.


    .step{:data=>{:title=>'Redirect to PureCloud to Handle Authentication'}}
        :markdown
            When the page loads, we redirect the page to the authorization url and specify:

            **response_type**: Use _token_ since this is an implicit (token) grant.

            **client_id**: The client ID for this application.

            **redirect_uri**: The URI to which the user is redirected after login.
    .step{:data=>{:title=>'Get the Access Token Out of the Url'}}
        :markdown
            After the user follows the redirect, the URI contains a hash (#) with the access token as a parameter.  We strip the parameter and save it in the token variable.
        .note.note-ruby
            We post the token to the server for use in the server.
        .note.note-python
            We post the token to the server for use in the server.
    .step{:data=>{:title=>'Make API Calls'}}
        :markdown
            Now that we have the bearer token, we can make an Ajax call to PureCloud, setting the value of the **Authorization** parameter to **bearer** _token_, where _token_ is the value from the hash.
